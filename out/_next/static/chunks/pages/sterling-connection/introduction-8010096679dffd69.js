(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[785],{1048:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/sterling-connection/introduction",function(){return t(1751)}])},1751:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});var o=t(5893),i=t(620),r=t(3805),a=t(7845),s=t(1151);function d(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){d(e,n,t[n])}))}return e}function l(e){var n=void 0===e?{}:e,t=function(){var e=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",h3:"h3",em:"em",pre:"pre",ul:"ul",li:"li"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{children:"Sterling Connection"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"sterling-connection"})," package is a\n",(0,o.jsx)(e.a,{href:"https://redux.js.org/understanding/history-and-design/middleware",children:"Redux middleware"}),"\nthat maintains a WebSocket connection between Sterling and a data provider such\nas Alloy or Forge."]}),"\n",(0,o.jsx)(e.h2,{children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["The WebSocket connection between ",(0,o.jsx)(e.code,{children:"sterling-connection"})," and a data provider is\nused as a two-way street. Data providers can provide data for Sterling to\ndisplay, and Sterling can tell the provider when the user has interacted with\nthe interface in some way."]}),"\n",(0,o.jsx)(e.h3,{children:"Data in Sterling"}),"\n",(0,o.jsxs)(e.p,{children:["There are numerous types of data that can be communicated between Sterling and a\nprovider, but the most important is certainly the ",(0,o.jsx)(e.a,{href:"./types#datum",children:(0,o.jsx)(e.code,{children:"Datum"})}),". In\nessence, a ",(0,o.jsx)(e.code,{children:"Datum"})," is a piece of data that can be displayed in any of Sterling's\nviews (of which there are three: Graph, Table, and Script). Historically,\nSterling began as a visualizer for ",(0,o.jsx)(e.a,{href:"http://alloytools.org/",children:"Alloy"}),", and so\nindividual Alloy instances in the form of XML strings were the data flowing\nthrough Sterling. To remove this strict dependency on Alloy XML, the ",(0,o.jsx)(e.code,{children:"Datum"}),"\ntype adds a layer of abstraction so that Sterling can support more data formats.\nAs of December 2021 the Alloy XML format is still the only one supported, but\nthe data must now be sent to Sterling using a ",(0,o.jsx)(e.code,{children:"Datum"})," object instead of the raw\nXML string."]}),"\n",(0,o.jsx)(e.p,{children:"All other data flowing between Sterling and a provider are typically related to\nsome sort of user interaction, whether it be the buttons that are available to a\nuser when looking at some datum or a REPL expression that the user wants to have\nevaluated."}),"\n",(0,o.jsx)(e.h3,{children:"Communication Expectations"}),"\n",(0,o.jsx)(e.p,{children:"A WebSocket connection is different from an HTTP connection in that it does not\nuse the request-response paradigm. Rather, a line of communication is opened up\nbetween the server (the data provider) and the client (Sterling) and the two are\nfree to send messages to each other as they wish. Think of it like text\nmessaging: you might send a text to a friend to tell them you had fun hiking\nyesterday, or you might ask them to send you that really amazing photo they took\nwhile you were hiking yesterday. Sometimes you expect a response, and sometimes\nyou don't. Either way, you send the message and then go about your day, and your\nfriend can choose if and when to respond. On the other hand, maybe your friend\nalready knows that you want that picture, and so they send it to you without you\nasking."}),"\n",(0,o.jsxs)(e.p,{children:["The same is true for Sterling and a data provider. Sometimes Sterling will ask\nthe provider for data and expect a response, and sometimes you'll want to send\ndata to Sterling without it even asking for it. When Sterling ",(0,o.jsx)(e.em,{children:"does"})," expect a\nresponse from a provider, we'll let you know in the documentation, and if and\nwhen the provider responds is up to the developer of the provider. Either way,\nSterling will continue to go about its day."]}),"\n",(0,o.jsx)(e.h2,{children:"Communication Protocol"}),"\n",(0,o.jsxs)(e.p,{children:["All messages between a data provider and the ",(0,o.jsx)(e.code,{children:"sterling-connection"})," middleware\nare in JSON format, and are structured as follows:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "type": "message-type",\n  "version": 1\n  "payload": ...\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"type"})," field is a string that identifies the shape of the ",(0,o.jsx)(e.code,{children:"payload"})," field,\nand the ",(0,o.jsx)(e.code,{children:"version"})," field is an integer identifying the version of the\ncommunication protocol. The ",(0,o.jsx)(e.code,{children:"payload"})," field contains any data associated with\nthe message type. In some cases there is no data associated with a message, and\nso the ",(0,o.jsx)(e.code,{children:"payload"})," field can be omitted."]}),"\n",(0,o.jsxs)(e.p,{children:["There are exactly two exceptions to this rule. The ",(0,o.jsx)(e.a,{href:"./send#ping",children:(0,o.jsx)(e.code,{children:"ping"})})," and\n",(0,o.jsx)(e.a,{href:"./receive#pong",children:(0,o.jsx)(e.code,{children:"pong"})})," messages, which are used to keep the WebSocket\nconnection alive, are simply the strings ",(0,o.jsx)(e.code,{children:'"ping"'})," and ",(0,o.jsx)(e.code,{children:'"pong"'}),"."]}),"\n",(0,o.jsx)(e.h2,{children:"Message Specifications"}),"\n",(0,o.jsx)(e.p,{children:"The message specifications are categorized in these docs based on the sender and\nreceiver of the message:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"./send",children:"Sterling -> Provider"})," - Messages sent from Sterling to the data\nprovider."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"./receive",children:"Provider -> Sterling"})," - Messages sent from the data provider to\nSterling."]}),"\n"]})]})},i=Object.assign({},(0,s.ah)(),n.components).wrapper;return i?(0,o.jsx)(i,c({},n,{children:(0,o.jsx)(t,{})})):t()}var h=(0,o.jsx)(l,{});function u(e){return(0,r.withSSG)((0,i.Z)({filename:"introduction.mdx",route:"/sterling-connection/introduction",meta:{},pageMap:[{name:"index",route:"/",frontMatter:{title:"Sterling Docs"}},{name:"meta.json",meta:{index:"Introduction","sterling-connection":"Sterling Connection"}},{name:"sterling-connection",children:[{name:"formats",route:"/sterling-connection/formats"},{name:"introduction",route:"/sterling-connection/introduction"},{name:"meta.json",meta:{introduction:"Introduction",receive:"Provider -> Sterling",send:"Sterling -> Provider",types:"Types",formats:"Data Formats"}},{name:"receive",route:"/sterling-connection/receive",frontMatter:{title:"Provider to Sterling"}},{name:"send",route:"/sterling-connection/send",frontMatter:{title:"Sterling to Provider"}},{name:"types",route:"/sterling-connection/types"}],route:"/sterling-connection"}]},a.Z))(c({},e,{children:h}))}}},function(e){e.O(0,[284,830,774,888,179],(function(){return n=1048,e(e.s=n);var n}));var n=e.O();_N_E=n}]);